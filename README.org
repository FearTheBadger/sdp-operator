[[https://github.com/appgate/sdp-operator/actions/workflows/docker.yml][https://github.com/appgate/sdp-operator/actions/workflows/docker.yml/badge.svg?branch=main&event=push]]
* appgate-operator
** Description
This project implements a kubernetes operator to configure an appgate system.

The main goal of the operator is to keep in sync the state of an appgate system
with an external state defined somewhere (github repository for instance).

The definition of the expected state is done in a declarative way (using yaml
files) where the desired entities are defined.

The operator then reacts to changes in those entities performing the required
operations to keep the appgate environment synchronized with the desired state.

The appgate operator supports the following API versions:

 - v12 (Appgate version 5.1)
 - v13 (Appgate version 5.2)
 - v14 (Appgate version 5.3)
 - v15 (Appgate version 5.4)
 - v16 (Appgate version 5.5)

The entities supported by the operator are:

   - Policy
   - Condition
   - Entitlement
   - RingfenceRule
   - Appliance
   - Site
   - IpPool
   - IdentityProvider
   - LocalUser
   - AdministrativeRole
   - MfaProvider
   - AdminMfaSettings
   - TrustedCertificate
   - CriteriaScripts
   - DeviceScript
   - EntitlementScript
   - ApplianceCustomization
   - GlobalSettings
   - ClientConnection

** How it works
Appgate entities are defined in terms of [[https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/][CRD]] in the k8s cluster so they can be
managed (created, deleted or modified) using `kubectl` command with yaml files
representing those CRD.

The appgate-operator, when running, will listen for changes on those CRD entities,
note that the operator listen to events inside a namespace.

When the operator starts, it gets the actual state from the appgate controller
and from there it starts listening for events.

On each event received it restores a timer, once the timer timeouts (meaning
that no more events were received in that specified time frame) the operator
will proceed to compute and apply a new `Plan`.

A `Plan` is the difference between the current state and the desired state and
it defines for each entity 4 subset of operations to perform:

 - create :: a new entity needs to be created
 - delete :: an existing entity needs to be deleted
 - modify :: an existing entity needs to be modified
 - share :: an entity that won't change

All the entities are identified by name, that way we don't need to save real
uuids in the configuration. Entities referencing other entities (entitlements
reference conditions for instance) do it by name also, the operator resolves
those names into real uuids before doing the queries.

*** Errors
There are different sources of errors.

Some entities reference another ones like `entitlements` using `conditions`. If
one entity references another entity that is not in the expeted state after the
`Plan` is applied then it's marked as a conflict error. If a plan contains
errors it won't be applied.

Another kind of error is when applying the plan for real. If the REST call to
the operator fails, that entity is marked as failed as well. Then later when
creating the new state those entity that failed will be removed from the new
state (or added if the operation was `delete`).

*** Modes of operation
**** DRY_MODE
When this flag is on the operator will compute the plan to apply but it won't do
any call.

**** CLEANUP_ON_STARTUP
When this flag is on the operator when initializing the state for first time
will remove all the entities that are not part of the set of builtin tags (see
[[*Configuration][configuration section]] to know how to configure this set).

***** Example 1
We have an appgate system with a condition but we dont have any condition
defined in kubernetes.

#+BEGIN_EXAMPLE
  2020-07-17 17:14:38,940 [INFO] [policies/appgate-test-1] Loop for policies/appgate-test-1 started
  2020-07-17 17:14:38,942 [INFO] [entitlements/appgate-test-1] Loop for entitlements/appgate-test-1 started
  2020-07-17 17:14:38,943 [INFO] [conditions/appgate-test-1] Loop for conditions/appgate-test-1 started
  2020-07-17 17:14:38,945 [INFO] [appgate-operator/appgate-test-1] Getting current state from controller
  2020-07-17 17:14:39,228 [INFO] [appgate-operator/appgate-test-1] Ready to get new events and compute a new plan
  2020-07-17 17:14:44,235 [INFO] [appgate-operator/appgate-test-1] No more events for a while, creating a plan
  2020-07-17 17:14:44,235 [WARNING] [appgate-operator/appgate-test-1] Running in dry-mode, nothing will be created
  2020-07-17 17:14:44,236 [INFO] [appgate-operator/appgate-test-1] AppgatePlan Summary:
  2020-07-17 17:14:44,236 [INFO] [appgate-operator/appgate-test-1] = <class 'appgate.types.Condition'> Always [ee7b7e6f-e904-4b4f-a5ec-b3bef040643e]
  2020-07-17 17:14:44,236 [INFO] [appgate-operator/appgate-test-1] = <class 'appgate.types.Condition'> my-new-condition [1bd1f4a8-d2ca-409d-b925-3530447caf45]
  2020-07-17 17:14:44,236 [INFO] [appgate-operator/appgate-test-1] = <class 'appgate.types.Policy'> Builtin Administrator Policy [172143a0-7ed4-11e4-b4a9-0800200c9a66]
  2020-07-17 17:14:49,242 [INFO] [appgate-operator/appgate-test-1] No more events for a while, creating a plan
  2020-07-17 17:14:49,243 [WARNING] [appgate-operator/appgate-test-1] Running in dry-mode, nothing will be created
  2020-07-17 17:14:49,243 [INFO] [appgate-operator/appgate-test-1] AppgatePlan Summary:
  2020-07-17 17:14:49,244 [INFO] [appgate-operator/appgate-test-1] = <class 'appgate.types.Condition'> Always [ee7b7e6f-e904-4b4f-a5ec-b3bef040643e]
  2020-07-17 17:14:49,244 [INFO] [appgate-operator/appgate-test-1] = <class 'appgate.types.Condition'> my-new-condition [1bd1f4a8-d2ca-409d-b925-3530447caf45]
  2020-07-17 17:14:49,244 [INFO] [appgate-operator/appgate-test-1] = <class 'appgate.types.Policy'> Builtin Administrator Policy [172143a0-7ed4-11e4-b4a9-0800200c9a66]
#+END_EXAMPLE

As we can see in this example the new condition (not built-in) is detected when
discovering the first state. Because we did not choose to cleanup on startup,
the condition is kept there and not managed by the operator.

***** Example 2
Same example when cleanup is on.

#+BEGIN_EXAMPLE
  2020-07-17 17:20:12,999 [INFO] [policies/appgate-test-1] Loop for policies/appgate-test-1 started
  2020-07-17 17:20:13,001 [INFO] [entitlements/appgate-test-1] Loop for entitlements/appgate-test-1 started
  2020-07-17 17:20:13,002 [INFO] [conditions/appgate-test-1] Loop for conditions/appgate-test-1 started
  2020-07-17 17:20:13,005 [INFO] [appgate-operator/appgate-test-1] Getting current state from controller
  2020-07-17 17:20:13,412 [INFO] [appgate-operator/appgate-test-1] Ready to get new events and compute a new plan
  2020-07-17 17:20:18,419 [INFO] [appgate-operator/appgate-test-1] No more events for a while, creating a plan
  2020-07-17 17:20:18,419 [WARNING] [appgate-operator/appgate-test-1] Running in dry-mode, nothing will be created
  2020-07-17 17:20:18,419 [INFO] [appgate-operator/appgate-test-1] AppgatePlan Summary:
  2020-07-17 17:20:18,420 [INFO] [appgate-operator/appgate-test-1] - <class 'appgate.types.Condition'> my-new-condition [1bd1f4a8-d2ca-409d-b925-3530447caf45]
  2020-07-17 17:20:18,420 [INFO] [appgate-operator/appgate-test-1] = <class 'appgate.types.Condition'> Always [ee7b7e6f-e904-4b4f-a5ec-b3bef040643e]
  2020-07-17 17:20:18,420 [INFO] [appgate-operator/appgate-test-1] = <class 'appgate.types.Policy'> Builtin Administrator Policy [172143a0-7ed4-11e4-b4a9-0800200c9a66]
#+END_EXAMPLE

Now we can see that the condition was marked as a deletion because it's not defined in the cluster.

If we have the cleanup option on BUT the cluster knows about those entities they are not deleted:

#+BEGIN_EXAMPLE
  2020-07-17 17:22:38,393 [INFO] [policies/appgate-test-1] Loop for policies/appgate-test-1 started
  2020-07-17 17:22:38,396 [INFO] [entitlements/appgate-test-1] Loop for entitlements/appgate-test-1 started
  2020-07-17 17:22:38,398 [INFO] [conditions/appgate-test-1] Loop for conditions/appgate-test-1 started
  2020-07-17 17:22:38,403 [INFO] [appgate-operator/appgate-test-1] Getting current state from controller
  2020-07-17 17:22:38,707 [INFO] [appgate-operator/appgate-test-1] Ready to get new events and compute a new plan
  2020-07-17 17:22:39,020 [INFO] [appgate-operator/appgate-test-1}] Event op: ADDED <class 'appgate.types.Condition'> with name my-new-condition
  2020-07-17 17:22:44,025 [INFO] [appgate-operator/appgate-test-1] No more events for a while, creating a plan
  2020-07-17 17:22:44,025 [WARNING] [appgate-operator/appgate-test-1] Running in dry-mode, nothing will be created
  2020-07-17 17:22:44,026 [INFO] [appgate-operator/appgate-test-1] AppgatePlan Summary:
  2020-07-17 17:22:44,026 [INFO] [appgate-operator/appgate-test-1] = <class 'appgate.types.Condition'> Always [ee7b7e6f-e904-4b4f-a5ec-b3bef040643e]
  2020-07-17 17:22:44,026 [INFO] [appgate-operator/appgate-test-1] = <class 'appgate.types.Condition'> my-new-condition [1bd1f4a8-d2ca-409d-b925-3530447caf45]
  2020-07-17 17:22:44,027 [INFO] [appgate-operator/appgate-test-1] = <class 'appgate.types.Policy'> Builtin Administrator Policy [172143a0-7ed4-11e4-b4a9-0800200c9a66]
#+END_EXAMPLE

**** TWO_WAY_SYNC
This flag makes the appgate-operator to read the current state from the
controller before computing the new plan. Basically whatever entity
created/deleted/modified manually will be reverted.

When it's not set it will just compute the plan against the current state in
memory (which could be different from the one in the controller).

*** Secrets
The operator supports 3 ways of dealing with secrets:
 - unencrypted secrets.
 - secrets encrypted with a [[https://cryptography.io/en/latest/fernet/][fernet]] key.
 - secrets saved as =secret= store in k8s.

**** Unencrypted secrets
In the first case (*unencrypted secrets*) we will save the secret in the yaml
file itself (or some tool will add it before pushing the event into k8s). In
this case the operator just uses that value as the value of the secrets field.

**** Encrypted secrets
We can also save an encrypted secret in the yaml file defining the entity, in
this case we need to provide a fermet key value in the environment variable
~APPGATE_OPERATOR_FERNET_KEY~ and the operator will decrypt the contents of the
value before using it.

In order to generate a new fernet key we can run:
#+begin_src shell
  python3 -c 'from cryptography.fernet import Fernet;print(Fernet.generate_key().decode())'
#+end_src

In order to generate a secret with the new key we can do something like this:
#+begin_src shell
  SECRET='my-secret' KEY='dFVzzjKCa9mWbeig8dprliGLCXwnwE5Fbycz4Xe2ptk=' python3.9 -c 'from cryptography.fernet import Fernet;import os;print(Fernet(os.getenv("KEY")).encrypt(bytes(os.getenv("SECRET").encode())))'
#+end_src

Now it's safe to store the secrets in github.

If the variable ~APPGATE_OPERATOR_FERNET_KEY~ is set and the value of the secret
is a string then the operator will use the key to decrypt the secret.

**** k8s secret store
We can also use k8s the secrets store mechanism to save the secrets and reference
them in the yaml file. In this case we just set the value of the field with the
secret to a dictionary like this

#+begin_example
  type: k8s/secret
  password: my-secret
#+end_example

*** bytes
Some fields require bytes as a value (contents from a file for example) encoded
in base64. For now we only support the value encoded as base64 directly in the
yaml file.

** Building
The appgate-operator is provided as a docker image tagged with the appgate API
version. For example:

 - appgate-operator:v12
 - appgate-operator:v13
 - appgate-operator:v14
 - appgate-operator:v15
 - appgate-operator:v16

Each image uses that specific API version by default but contains the specs for
all the API versions supported.

To build the images we use a docker image as a builder with all the dependencies
needed.

In order to create the images run (~make docker-build-image is only needed if we
don't have yet the builder image or if we have changed any dependency):

#+BEGIN_SRC shell
  make docker-build-image && make docker-images
#+END_SRC

To push the images into a registry just run:

#+BEGIN_SRC shell
  for tag in v12 v13 v14 v15 v16; do
      docker tag appgate-operator:${tag} user/appgate-operator:${tag} && \
      docker push user/appgate-operator:${tag}
  done
#+END_SRC

** Configuration
The appgate-operator gets its configuration from environment variables (normally
specified in the pod yaml file).

Before deploying it MUST define these env variables:

 - APPGATE_OPERATOR_NAMESPACE :: the namespace the appgate-operator will watch
   events for.
 - APPGATE_OPERATOR_HOST :: the controller host the appgate-operator will be
   operating on.
 - APPGATE_OPERATOR_USER :: the user used to authenticate the REST calls to the
   controller.
 - APPGATE_OPERATOR_PASSWORD :: the password used to authenticate the REST calls
   to the controller.
 - APPGATE_OPERATOR_PROVIDER :: the provider used to authenticate the REST calls
   to the controller. The provider will default to local if not set.
 - APPGATE_OPERATOR_DEVICE_ID :: the device id used to authenticate the REST calls
   to the controller. The device id will be generated and stored in the operator's
   metadata configmap if not set. It will then be re-used in subsequent runs.

Optional environment variables that the operator uses:
 - APPGATE_OPERATOR_TIMEOUT :: Time without activity after which the appgate
   operator will try to apply changes received into a plan. Every time a new
   event is received this timer is reset to 0 again.
 - APPGATE_OPERATOR_DRY_RUN :: When set to 1 the operator will run in dry run
   mode. In this mode the operator will log all the actions but it won't perform
   any real action (delete, create or modify) in the conrtoller. Default value
   is 1.
 - APPGATE_OPERATOR_CLEANUP :: When set to 1 the operator will try to set the
   controller into the same state as the configuration. When set to 0 it won't
   try to delete the entities that are already defined in a controller. Default
   value is 1.
 - APPGATE_OPERATOR_TWO_WAY_SYNC :: When set to 1 it will read the current
   configuration from the controller just before computing the new plan. This
   basically means that whatever has been added / modified / deleted using the
   ui and not in the state represented in github will be discarded. Default
   value is 1.
 - APPGATE_OPERATOR_SPEC_DIRECTORY :: Directory where to look for the open api
   specification. By default each image version will default to a specific open
   api specification version. For example the image =appgate-operator:v12= will
   use *v12* as default open api specification version. This environment
   variable is normally not needed, if you want to use another version it's
   better to use the image created for that version instead..
 - APPGATE_OPERATOR_FERNET_KEY :: FERNET key used to encrypt secrets when this
   secrets mode is used.
 - APPGATE_OPERATOR_CONFIG_MAP :: k8s config-map used to store metadata related
   to entities used when comparing entitied with secrets. Default value is the
   ~APPGATE_OPERATOR_HOST~.
 - APPGATE_OPERATOR_SSL_NO_VERIFY :: When set to 1 the operator won't verify the
   validity of the SSL cerficate. Use this if you have a self signed
   certificate. Not recommended on production. Default value is 0.
 - APPGATE_OPERATOR_CACERT :: CA Certificate used by controllers (PEM
   format). It can be encoded in base64 or just the contents of the PEM
   certificate as a string, using the former makes it easier to add the
   certificate in k8s. Example:
 : export APPGATE_OPERATOR_CACERT=`cat cert.ca | base64 -w 0`
 : export APPGATE_OPERATOR_CACERT=`cat cert.ca`
 - APPGATE_OPERATOR_BUILTIN_TAGS :: List of tags (comma separated) defining
   builtin entities. Builtin entities are never deleted and when running in
   cleanup mode they are used to compute what entities should be
   deleted. Entities with tags belonging to this set are considered builtin
   entities.
 - APPGATE_OPERATOR_TARGET_TAGS :: List of tags (comma separated) defining the
   entities we are interested on. Only the entities in this set (entities with
   tags belonging to this set) will be selected from the appgate system. If no
   target tags are defined then all the entities will be selected.
 - APPGATE_OPERATOR_EXCLUDE_TAGS :: List of tags (comma separated) defining the
   set of entities we want to filter out explicitly from being
   selected. Entities with tags in this set will not be retrieved to compute the
   working plan.

*** Configuration when runinng the operator locally
In the case we run it locally for testing we only need to export those
environment variables before launching the process.

*** Configuration when running the operator incluster mode (inside k8s)
In this case the pod specification will get `APPGATE_OPERATOR_USER` and
`APPGATE_OPERATOR_PASSWORD` from a k8s Secret entry (see file
~manifests/01-secrets.yaml~).

The rest of environment variables are taken from a ConfigMap k8s entry (see
~manifests/01-config.yaml~).

** Installing the sdp-operator
The sdp-operator can be deployed using helm like this:

#+begin_src shell
  helm install sdp-operator ghcr.io/appgate/sdp-operator --version <version>
#+end_src

The latest version released can be found [[https://github.com/appgate/sdp-operator/pkgs/container/charts%2Fsdp-operator][here]].

This will deploy an sdp-operator in the namespace specified when running ~helm
install~.

*** Available sdp-operator parameters for the helm chart
The sdp-operator helm chart supports the following parameters. The paramaters
with default value =null= are mandatory when installing the chart.

| Name                             | Description                                     | Value                          |
|----------------------------------+-------------------------------------------------+--------------------------------|
| `sdp.operator.host`              | SDP Operator controller host (required)         | `null`                         |
| `sdp.operator.sslNoVerify`       | SDP Operator ssl-no-verify mode                 | `"0"`                          |
| `sdp.operator.twoWaySync`        | SDP Operator two-way-sync mode                  | `"1"`                          |
| `sdp.operator.image.pullSecrets` | SDP operator pull secret                        | `[]`                           |
| `sdp.operator.cofigMapMt`        | SDP Operator metadata configmap                 | `null`                         |
| `sdp.operator.image.pullPolicy`  | SDP Operator pull policy                        | `Always`                       |
| `sdp.operator.builtinTags`       | SDP Operator builtin tags                       | `"builtin"`                    |
| `sdp.operator.caCert`            | SDP Operator host CA cert                       | `null`                         |
| `sdp.operator.dryRun`            | SDP Operator dry-run mode                       | `"1"`                          |
| `sdp.operator.timeout`           | SDP Operator event loop timeout                 | `"30"`                         |
| `sdp.operator.targetTags`        | SDP Operator target tags                        | `""`                           |
| `sdp.operator.version`           | SDP Operator API version                        | `"v16"`                        |
| `sdp.operator.fernetKey`         | SDP Operator Fernet Key                         | `null`                         |
| `sdp.operator.cleanup`           | SDP Operator cleanup mode                       | `"1"`                          |
| `sdp.operator.deviceId`          | SDP Operator device id (uuid format) (required) | `null`                         |
| `sdp.operator.logLevel`          | SDP Operator log level                          | `info`                         |
| `sdp.operator.image.tag`         | SDP Operator image tag                          | `null`                         |
| `sdp.operator.image.repository`  | SDP operator image registry                     | `ghcr.io/appgate/sdp-operator` |
| `sdp.operator.excludeTags`       | SDP Operator exclude tags                       | `""`                           |

*** Available kubernetes parameters for the helm chart

| Name                    | Description                                          | Value  |
|-------------------------+------------------------------------------------------+--------|
| `serviceAccount.create` | Enable the creation of a ServiceAccount for SDP pods | `true` |
| `rbac.create`           | Whether to create & use RBAC resources or not        | `true` |

*** Installation example

That would deploy for example the operator in a namespace called =operator-test=

#+begin_src shell
  helm install -n operator-test operator-test \
       --set sdp.operator.host="https://www.my-appgate.com:444" \
       --set sdp.operator.deviceId="369fb6d0-8820-4169-928b-dad9e7b50335" \
#+end_src

** Dump current entities in an environment
To get the current entities from an existing environment we can call the
appgate-operator from the cli like this:

#+BEGIN_SRC shell
  appgate-operator dump-entities
#+END_SRC

That command will generate a new directory (with the current date as name)
containing all the entities discovered in the system:

#+BEGIN_EXAMPLE
  atuin ⊢ ls 2020-07-31
  administrativerole.yaml  appliance.yaml         condition.yaml        entitlement.yaml     identityprovider.yaml  localuser.yaml    policy.yaml         site.yaml
  adminmfasettings.yaml    clientconnection.yaml  criteriascripts.yaml  globalsettings.yaml  ippool.yaml            mfaprovider.yaml  ringfencerule.yaml
#+END_EXAMPLE

#+BEGIN_EXAMPLE
atuin ⊢ cat 2020-07-31/conditions.yaml
apiVersion: beta.appgate.com/v1
kind: CONDITION
metadata:
  name: my-new-condition
spec:
  expression: ' var result = false; /*password*/ if (claims.user.hasPassword(''test'',
    60)) { return true; } /*end password*/ return result; '
  id: 5283e6a7-7732-4260-a195-831f3e5ab6a5
  name: my-new-condition
  remedyMethods: []
  repeatSchedules:
  - '13:32'
  - 1h
  tags:
  - api-created
  - k8s
  - automated
---
apiVersion: beta.appgate.com/v1
kind: CONDITION
metadata:
  name: Always
spec:
  expression: return true;
  id: ee7b7e6f-e904-4b4f-a5ec-b3bef040643e
  name: Always
  notes: Condition for built-in usage.
  remedyMethods: []
  repeatSchedules: []
  tags:
  - builtin
---
#+END_EXAMPLE

** Verify entities dumped from an environment
If we have a set of entities dumped from an environment (like we did in the
previous step) we can validate them against different API version.

Suppose that we have a directory =exacmples/v13= with entities dumped from an
environment (running v13 of the API).

We can now test if those entities are compatible with different version.

Against the same api version (v13):

#+begin_example
  appgate-operator --spec-dir api_specs/v13 validate-entities examples/v13
#+end_example

That command will try to load all the entities defined in yaml files inside that
directory (*.yaml and *.yml files) using the API v13 and it will report errors
found when loading the entities:

#+begin_example
   - Appliance::controller-8b61286b-caf5-47df-8702-c1506a4afe3c-site1: OK.
   - Appliance::gateway-8b61286b-caf5-47df-8702-c1506a4afe3c-site1: OK.
   - DeviceScript::fooscript: OK.
   - TrustedCertificate::test-vsphere: OK.
   - EntitlementScript::hello: OK.
   - AdminMfaSettings::adminmfasettings: OK.
   - ClientConnection::clientconnection: OK.
   - LocalUser::bobbytables: OK.
   - Condition::always: OK.
   - IpPool::simple-setup-ipv6: OK.
   - IpPool::default-pool-v6: OK.
   - IpPool::simple-setup-ipv4: OK.
   - IpPool::default-pool-v4: OK.
   - IdentityProvider::connector: OK.
   - IdentityProvider::local: OK.
   - GlobalSettings::globalsettings: OK.
   - CriteriaScripts::everyone: OK.
   - CriteriaScripts::noone: OK.
   - RingfenceRule::block-in: OK.
   - RingfenceRule::block-google-dns: OK.
   - Policy::simple-setup-pol: OK.
   - Policy::builtin-administrator-policy: OK.
   - MfaProvider::default-fido2-provider: OK.
   - MfaProvider::default-time-based-otp-provider: OK.
   - MfaProvider::my-super-provider: OK.
   - ApplianceCustomization::params-adjustment: OK.
   - AdministrativeRole::system-administration: OK.
   - AdministrativeRole::api-access: OK.
   - Site::simple-setup-site: OK.
   - Site::default-site: OK.
   - Entitlement::simple-setup-ent-ping: OK.
   - Entitlement::simple-setup-ent-http: OK.
#+end_example

We can see that it managed to load those entities using v13. We can try the
same entities this time against v15 of the API:

#+begin_example
  appgate-operator --spec-dir api_specs/v15 validate-entities examples/v13
#+end_example

Once again we can see that they are compatible since we didn't get any error:

#+begin_example
   - Appliance::controller-8b61286b-caf5-47df-8702-c1506a4afe3c-site1: OK.
   - Appliance::gateway-8b61286b-caf5-47df-8702-c1506a4afe3c-site1: OK.
   - DeviceScript::fooscript: OK.
   - TrustedCertificate::test-vsphere: OK.
   - EntitlementScript::hello: OK.
   - AdminMfaSettings::adminmfasettings: OK.
   - ClientConnection::clientconnection: OK.
   - LocalUser::bobbytables: OK.
   - Condition::always: OK.
   - IpPool::simple-setup-ipv6: OK.
   - IpPool::default-pool-v6: OK.
   - IpPool::simple-setup-ipv4: OK.
   - IpPool::default-pool-v4: OK.
   - IdentityProvider::connector: OK.
   - IdentityProvider::local: OK.
   - GlobalSettings::globalsettings: OK.
   - CriteriaScripts::everyone: OK.
   - CriteriaScripts::noone: OK.
   - RingfenceRule::block-in: OK.
   - RingfenceRule::block-google-dns: OK.
   - Policy::simple-setup-pol: OK.
   - Policy::builtin-administrator-policy: OK.
   - MfaProvider::default-fido2-provider: OK.
   - MfaProvider::default-time-based-otp-provider: OK.
   - MfaProvider::my-super-provider: OK.
   - ApplianceCustomization::params-adjustment: OK.
   - AdministrativeRole::system-administration: OK.
   - AdministrativeRole::api-access: OK.
   - Site::simple-setup-site: OK.
   - Site::default-site: OK.
   - Entitlement::simple-setup-ent-ping: OK.
   - Entitlement::simple-setup-ent-http: OK.
#+end_example

Let's see what happens if we try to load them from an older version (like v12):

#+begin_example
  appgate-operator --spec-dir api_specs/v12 validate-entities examples/v13
#+end_example

This time the validator complains about some entities not being able to be
loaded (because API incompatibilities):

#+begin_example
   - Appliance::controller-8b61286b-caf5-47df-8702-c1506a4afe3c-site1: OK.
   - Appliance::gateway-8b61286b-caf5-47df-8702-c1506a4afe3c-site1: OK.
   - DeviceScript::fooscript: OK.
   - TrustedCertificate::test-vsphere: OK.
   - EntitlementScript::hello: OK.
   - AdminMfaSettings::adminmfasettings: OK.
   - ClientConnection::clientconnection: OK.
   - LocalUser::bobbytables: OK.
   - Condition::always: OK.
   - IpPool::simple-setup-ipv6: OK.
   - IpPool::default-pool-v6: OK.
   - IpPool::simple-setup-ipv4: OK.
   - IpPool::default-pool-v4: OK.
   - IdentityProvider::connector: OK.
   - IdentityProvider::local: OK.
   - GlobalSettings::globalsettings: OK.
   - CriteriaScripts::everyone: OK.
   - CriteriaScripts::noone: OK.
   - RingfenceRule::block-in: ERROR: loading entity: loader: PlatformType.K8S, type: <class 'appgate.openapi.parser.RingfenceRule_Actions'>, value: [{'action': 'block', 'direction': 'in', 'hosts': ['0.0.0.0/0', '::0'], 'ports': ['1-65535'], 'protocol': 'tcp'}, {'action': 'block', 'direction': 'in', 'hosts': ['0.0.0.0/0', '::0'], 'ports': ['1-65535'], 'protocol': 'udp'}, {'action': 'block', 'direction': 'in', 'hosts': ['0.0.0.0/0'], 'protocol': 'icmp', 'types': ['0-255']}, {'action': 'block', 'direction': 'in', 'hosts': ['::0'], 'protocol': 'icmpv6', 'types': ['0-255']}].
   - RingfenceRule::block-google-dns: ERROR: loading entity: loader: PlatformType.K8S, type: <class 'appgate.openapi.parser.RingfenceRule_Actions'>, value: [{'action': 'allow', 'direction': 'out', 'hosts': ['8.8.8.8'], 'ports': ['53'], 'protocol': 'tcp'}].
   - Policy::simple-setup-pol: OK.
   - Policy::builtin-administrator-policy: OK.
   - MfaProvider::default-fido2-provider: OK.
   - MfaProvider::default-time-based-otp-provider: OK.
   - MfaProvider::my-super-provider: OK.
   - ApplianceCustomization::params-adjustment: OK.
   - AdministrativeRole::system-administration: OK.
   - AdministrativeRole::api-access: OK.
   - Site::simple-setup-site: OK.
   - Site::default-site: OK.
   - Entitlement::simple-setup-ent-ping: OK.
   - Entitlement::simple-setup-ent-http: OK.
#+end_example
